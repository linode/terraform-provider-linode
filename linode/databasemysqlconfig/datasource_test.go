//go:build integration || databasemysqlconfig

package databasemysqlconfig_test

import (
	"fmt"
	"math"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/knownvalue"
	"github.com/hashicorp/terraform-plugin-testing/statecheck"
	"github.com/hashicorp/terraform-plugin-testing/tfjsonpath"
	"github.com/linode/terraform-provider-linode/v2/linode/acceptance"
	"github.com/linode/terraform-provider-linode/v2/linode/databasemysqlconfig/tmpl"
)

func TestAccDataSourceDatabaseMySQLConfig_basic(t *testing.T) {
	t.Parallel()

	resourceName := "data.linode_database_mysql_config.foobar"

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { acceptance.PreCheck(t) },
		ProtoV5ProviderFactories: acceptance.ProtoV5ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: tmpl.DataBasic(t),
				ConfigStateChecks: []statecheck.StateCheck{
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("connect_timeout").AtMapKey("description"),
						knownvalue.StringExact("The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("connect_timeout").AtMapKey("example"),
						knownvalue.Int64Exact(10),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("connect_timeout").AtMapKey("maximum"),
						knownvalue.Int64Exact(3600),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("connect_timeout").AtMapKey("minimum"),
						knownvalue.Int64Exact(2),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("connect_timeout").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("connect_timeout").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("default_time_zone").AtMapKey("description"),
						knownvalue.StringExact("Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or 'SYSTEM' to use the MySQL server default."),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("default_time_zone").AtMapKey("example"),
						knownvalue.StringExact("+03:00"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("default_time_zone").AtMapKey("maxLength"),
						knownvalue.Int64Exact(100),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("default_time_zone").AtMapKey("minLength"),
						knownvalue.Int64Exact(2),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("default_time_zone").AtMapKey("pattern"),
						knownvalue.StringExact("^([-+][\\d:]*|[\\w/]*)$"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("default_time_zone").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("default_time_zone").AtMapKey("type"),
						knownvalue.StringExact("string"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("group_concat_max_len").AtMapKey("description"),
						knownvalue.StringExact("The maximum permitted result length in bytes for the GROUP_CONCAT() function."),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("group_concat_max_len").AtMapKey("example"),
						knownvalue.Float64Exact(1024),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("group_concat_max_len").AtMapKey("maximum"),
						knownvalue.Float64Func(float64WithToleranceCheck(18446744073709551600, 5000)),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("group_concat_max_len").AtMapKey("minimum"),
						knownvalue.Float64Exact(4),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("group_concat_max_len").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("group_concat_max_len").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("information_schema_stats_expiry").AtMapKey("description"),
						knownvalue.StringExact("The time, in seconds, before cached statistics expire"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("information_schema_stats_expiry").AtMapKey("example"),
						knownvalue.Int64Exact(86400),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("information_schema_stats_expiry").AtMapKey("maximum"),
						knownvalue.Int64Exact(31536000),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("information_schema_stats_expiry").AtMapKey("minimum"),
						knownvalue.Int64Exact(900),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("information_schema_stats_expiry").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("information_schema_stats_expiry").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_change_buffer_max_size").AtMapKey("description"),
						knownvalue.StringExact("Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_change_buffer_max_size").AtMapKey("example"),
						knownvalue.Int64Exact(30),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_change_buffer_max_size").AtMapKey("maximum"),
						knownvalue.Int64Exact(50),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_change_buffer_max_size").AtMapKey("minimum"),
						knownvalue.Int64Exact(0),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_change_buffer_max_size").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_change_buffer_max_size").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_flush_neighbors").AtMapKey("description"),
						knownvalue.StringExact("Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_flush_neighbors").AtMapKey("example"),
						knownvalue.Int64Exact(0),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_flush_neighbors").AtMapKey("maximum"),
						knownvalue.Int64Exact(2),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_flush_neighbors").AtMapKey("minimum"),
						knownvalue.Int64Exact(0),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_flush_neighbors").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_flush_neighbors").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_ft_min_token_size").AtMapKey("description"),
						knownvalue.StringExact("Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service."),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_ft_min_token_size").AtMapKey("example"),
						knownvalue.Int64Exact(3),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_ft_min_token_size").AtMapKey("maximum"),
						knownvalue.Int64Exact(16),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_ft_min_token_size").AtMapKey("minimum"),
						knownvalue.Int64Exact(0),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_ft_min_token_size").AtMapKey("requires_restart"),
						knownvalue.Bool(true),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_ft_min_token_size").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_ft_server_stopword_table").AtMapKey("description"),
						knownvalue.StringExact("This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables."),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_ft_server_stopword_table").AtMapKey("example"),
						knownvalue.StringExact("db_name/table_name"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_ft_server_stopword_table").AtMapKey("maxLength"),
						knownvalue.Int64Exact(1024),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_ft_server_stopword_table").AtMapKey("pattern"),
						knownvalue.StringExact("^.+/.+$"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_ft_server_stopword_table").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_ft_server_stopword_table").AtMapKey("type"),
						knownvalue.ListExact([]knownvalue.Check{
							knownvalue.StringExact("null"),
							knownvalue.StringExact("string"),
						}),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_lock_wait_timeout").AtMapKey("description"),
						knownvalue.StringExact("The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120."),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_lock_wait_timeout").AtMapKey("example"),
						knownvalue.Int64Exact(50),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_lock_wait_timeout").AtMapKey("maximum"),
						knownvalue.Int64Exact(3600),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_lock_wait_timeout").AtMapKey("minimum"),
						knownvalue.Int64Exact(1),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_lock_wait_timeout").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_lock_wait_timeout").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_log_buffer_size").AtMapKey("description"),
						knownvalue.StringExact("The size in bytes of the buffer that InnoDB uses to write to the log files on disk."),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_log_buffer_size").AtMapKey("example"),
						knownvalue.Int64Exact(16777216),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_log_buffer_size").AtMapKey("maximum"),
						knownvalue.Int64Exact(4294967295),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_log_buffer_size").AtMapKey("minimum"),
						knownvalue.Int64Exact(1048576),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_log_buffer_size").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_log_buffer_size").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_online_alter_log_max_size").AtMapKey("description"),
						knownvalue.StringExact("The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables."),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_online_alter_log_max_size").AtMapKey("example"),
						knownvalue.Int64Exact(134217728),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_online_alter_log_max_size").AtMapKey("maximum"),
						knownvalue.Int64Exact(1099511627776),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_online_alter_log_max_size").AtMapKey("minimum"),
						knownvalue.Int64Exact(65536),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_online_alter_log_max_size").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_online_alter_log_max_size").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_read_io_threads").AtMapKey("description"),
						knownvalue.StringExact("The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service."),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_read_io_threads").AtMapKey("example"),
						knownvalue.Int64Exact(10),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_read_io_threads").AtMapKey("maximum"),
						knownvalue.Int64Exact(64),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_read_io_threads").AtMapKey("minimum"),
						knownvalue.Int64Exact(1),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_read_io_threads").AtMapKey("requires_restart"),
						knownvalue.Bool(true),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_read_io_threads").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_rollback_on_timeout").AtMapKey("description"),
						knownvalue.StringExact("When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service."),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_rollback_on_timeout").AtMapKey("example"),
						knownvalue.Bool(true),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_rollback_on_timeout").AtMapKey("requires_restart"),
						knownvalue.Bool(true),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_rollback_on_timeout").AtMapKey("type"),
						knownvalue.StringExact("boolean"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_thread_concurrency").AtMapKey("description"),
						knownvalue.StringExact("Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit)"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_thread_concurrency").AtMapKey("example"),
						knownvalue.Int64Exact(10),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_thread_concurrency").AtMapKey("maximum"),
						knownvalue.Int64Exact(1000),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_thread_concurrency").AtMapKey("minimum"),
						knownvalue.Int64Exact(0),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_thread_concurrency").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_thread_concurrency").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_write_io_threads").AtMapKey("description"),
						knownvalue.StringExact("The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service."),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_write_io_threads").AtMapKey("example"),
						knownvalue.Int64Exact(10),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_write_io_threads").AtMapKey("maximum"),
						knownvalue.Int64Exact(64),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_write_io_threads").AtMapKey("minimum"),
						knownvalue.Int64Exact(1),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_write_io_threads").AtMapKey("requires_restart"),
						knownvalue.Bool(true),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("innodb_write_io_threads").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("interactive_timeout").AtMapKey("description"),
						knownvalue.StringExact("The number of seconds the server waits for activity on an interactive connection before closing it."),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("interactive_timeout").AtMapKey("example"),
						knownvalue.Int64Exact(3600),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("interactive_timeout").AtMapKey("maximum"),
						knownvalue.Int64Exact(604800),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("interactive_timeout").AtMapKey("minimum"),
						knownvalue.Int64Exact(30),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("interactive_timeout").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("interactive_timeout").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),

					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("internal_tmp_mem_storage_engine").AtMapKey("description"),
						knownvalue.StringExact("The storage engine for in-memory internal temporary tables."),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("internal_tmp_mem_storage_engine").AtMapKey("enum"),
						knownvalue.ListExact([]knownvalue.Check{
							knownvalue.StringExact("TempTable"),
							knownvalue.StringExact("MEMORY"),
						}),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("internal_tmp_mem_storage_engine").AtMapKey("example"),
						knownvalue.StringExact("TempTable"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("internal_tmp_mem_storage_engine").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("internal_tmp_mem_storage_engine").AtMapKey("type"),
						knownvalue.StringExact("string"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("max_allowed_packet").AtMapKey("description"),
						knownvalue.StringExact("Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M)"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("max_allowed_packet").AtMapKey("example"),
						knownvalue.Int64Exact(67108864),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("max_allowed_packet").AtMapKey("maximum"),
						knownvalue.Int64Exact(1073741824),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("max_allowed_packet").AtMapKey("minimum"),
						knownvalue.Int64Exact(102400),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("max_allowed_packet").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("max_allowed_packet").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("max_heap_table_size").AtMapKey("description"),
						knownvalue.StringExact("Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M)"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("max_heap_table_size").AtMapKey("example"),
						knownvalue.Int64Exact(16777216),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("max_heap_table_size").AtMapKey("maximum"),
						knownvalue.Int64Exact(1073741824),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("max_heap_table_size").AtMapKey("minimum"),
						knownvalue.Int64Exact(1048576),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("max_heap_table_size").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("max_heap_table_size").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("net_buffer_length").AtMapKey("description"),
						knownvalue.StringExact("Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service."),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("net_buffer_length").AtMapKey("example"),
						knownvalue.Int64Exact(16384),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("net_buffer_length").AtMapKey("maximum"),
						knownvalue.Int64Exact(1048576),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("net_buffer_length").AtMapKey("minimum"),
						knownvalue.Int64Exact(1024),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("net_buffer_length").AtMapKey("requires_restart"),
						knownvalue.Bool(true),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("net_buffer_length").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("net_read_timeout").AtMapKey("description"),
						knownvalue.StringExact("The number of seconds to wait for more data from a connection before aborting the read."),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("net_read_timeout").AtMapKey("example"),
						knownvalue.Int64Exact(30),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("net_read_timeout").AtMapKey("maximum"),
						knownvalue.Int64Exact(3600),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("net_read_timeout").AtMapKey("minimum"),
						knownvalue.Int64Exact(1),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("net_read_timeout").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("net_read_timeout").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("net_write_timeout").AtMapKey("description"),
						knownvalue.StringExact("The number of seconds to wait for a block to be written to a connection before aborting the write."),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("net_write_timeout").AtMapKey("example"),
						knownvalue.Int64Exact(30),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("net_write_timeout").AtMapKey("maximum"),
						knownvalue.Int64Exact(3600),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("net_write_timeout").AtMapKey("minimum"),
						knownvalue.Int64Exact(1),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("net_write_timeout").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("net_write_timeout").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("sort_buffer_size").AtMapKey("description"),
						knownvalue.StringExact("Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K)"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("sort_buffer_size").AtMapKey("example"),
						knownvalue.Int64Exact(262144),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("sort_buffer_size").AtMapKey("maximum"),
						knownvalue.Int64Exact(1073741824),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("sort_buffer_size").AtMapKey("minimum"),
						knownvalue.Int64Exact(32768),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("sort_buffer_size").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("sort_buffer_size").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("sql_mode").AtMapKey("description"),
						knownvalue.StringExact("Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Akamai default SQL mode (strict, SQL standard compliant) will be assigned."),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("sql_mode").AtMapKey("example"),
						knownvalue.StringExact("ANSI,TRADITIONAL"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("sql_mode").AtMapKey("maxLength"),
						knownvalue.Int64Exact(1024),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("sql_mode").AtMapKey("pattern"),
						knownvalue.StringExact("^[A-Z_]*(,[A-Z_]+)*$"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("sql_mode").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("sql_mode").AtMapKey("type"),
						knownvalue.StringExact("string"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("sql_require_primary_key").AtMapKey("description"),
						knownvalue.StringExact("Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them."),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("sql_require_primary_key").AtMapKey("example"),
						knownvalue.Bool(true),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("sql_require_primary_key").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("sql_require_primary_key").AtMapKey("type"),
						knownvalue.StringExact("boolean"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("tmp_table_size").AtMapKey("description"),
						knownvalue.StringExact("Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M)"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("tmp_table_size").AtMapKey("example"),
						knownvalue.Int64Exact(16777216),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("tmp_table_size").AtMapKey("maximum"),
						knownvalue.Int64Exact(1073741824),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("tmp_table_size").AtMapKey("minimum"),
						knownvalue.Int64Exact(1048576),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("tmp_table_size").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("tmp_table_size").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("wait_timeout").AtMapKey("description"),
						knownvalue.StringExact("The number of seconds the server waits for activity on a noninteractive connection before closing it."),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("wait_timeout").AtMapKey("example"),
						knownvalue.Int64Exact(28800),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("wait_timeout").AtMapKey("maximum"),
						knownvalue.Int64Exact(2147483),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("wait_timeout").AtMapKey("minimum"),
						knownvalue.Int64Exact(1),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("wait_timeout").AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("mysql").AtSliceIndex(0).AtMapKey("wait_timeout").AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("binlog_retention_period").AtSliceIndex(0).AtMapKey("description"),
						knownvalue.StringExact("The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector."),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("binlog_retention_period").AtSliceIndex(0).AtMapKey("example"),
						knownvalue.Int64Exact(600),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("binlog_retention_period").AtSliceIndex(0).AtMapKey("maximum"),
						knownvalue.Int64Exact(86400),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("binlog_retention_period").AtSliceIndex(0).AtMapKey("minimum"),
						knownvalue.Int64Exact(600),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("binlog_retention_period").AtSliceIndex(0).AtMapKey("requires_restart"),
						knownvalue.Bool(false),
					),
					statecheck.ExpectKnownValue(
						resourceName,
						tfjsonpath.New("binlog_retention_period").AtSliceIndex(0).AtMapKey("type"),
						knownvalue.StringExact("integer"),
					),
				},
			},
		},
	})
}

func float64WithToleranceCheck(expected float64, tolerance float64) func(v float64) error {
	return func(v float64) error {
		diff := math.Abs(expected - v)
		if diff > tolerance {
			return fmt.Errorf("values differ by %v, which exceeds the tolerance of %v", diff, tolerance)
		}
		return nil
	}
}
