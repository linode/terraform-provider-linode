name: Integration Tests

on:
  workflow_dispatch: null
  push:
    branches:
      - main
      - dev

jobs:
  integration_tests:
    name: Run integration tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        user: ["USER_1", "USER_2", "USER_3", "USER_4"]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.x'

      - name: Install Dependencies
        run: |
          make deps
          sudo apt-get update -y
          sudo apt-get install -y build-essential

      - name: Install go-junit-report
        run: go install github.com/jstemmer/go-junit-report/v2@latest

      # Note: test tags are not in alphabetical order, it was divided to optimize test execution time
      - name: Set Test Scope for each Account
        run: |
          case "${{ matrix.user }}" in 
            "USER_1")
              echo "TEST_TAGS=acceptance,backup,domain,domainrecord,domains,domainzonefile,helper,instance" >> $GITHUB_ENV
              echo "LINODE_TOKEN=${{ secrets.LINODE_TOKEN_USER_1 }}" >> $GITHUB_ENV
              ;;
            "USER_2")
              echo "TEST_TAGS=instancenetworking,instancesharedips,instancetype,instancetypes,ipv6range,ipv6ranges,kernel,kernels,lke,nb,nbconfig,nbconfigs,nbnode,nbs,sshkey,sshkeys" >> $GITHUB_ENV
              echo "LINODE_TOKEN=${{ secrets.LINODE_TOKEN_USER_2 }}" >> $GITHUB_ENV
              ;;
            "USER_3")
              echo "TEST_TAGS=instanceconfig,instancedisk,instanceip,networkingip,objcluster,objkey,profile,rdns,region,regions,stackscript,stackscripts" >> $GITHUB_ENV
              echo "LINODE_TOKEN=${{ secrets.LINODE_TOKEN_USER_3 }}" >> $GITHUB_ENV
              ;;
            "USER_4")
              echo "TEST_TAGS=firewall,firewalldevice,firewalls,image,images,lkeclusters,lkenodepool,lkeversions,obj,objbucket,token,user,users,vlan,volume,volumes,vpc,vpcs" >> $GITHUB_ENV
              echo "LINODE_TOKEN=${{ secrets.LINODE_TOKEN_USER_4 }}" >> $GITHUB_ENV
              ;;
          esac

      - name: Set report filename
        run: echo "REPORT_FILENAME=$(date +'%Y%m%d%H%M')_terraform_test_report_${{ matrix.user }}.xml" >> $GITHUB_ENV

      - name: Run Integration Tests
        run: |
          make TEST_TAGS="${{ env.TEST_TAGS }}" int-test | go-junit-report -set-exit-code -iocopy -out $REPORT_FILENAME
        env:
          LINODE_TOKEN: ${{ env.LINODE_TOKEN }}

      - name: Upload Test Report as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ matrix.user }}
          if-no-files-found: ignore
          path: '*.xml'
          retention-days: 1


  process-upload-report:
    runs-on: ubuntu-latest
    needs: [integration_tests]
    if: always() # Run even if previous job fails

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip3 install requests wheel boto3

      - name: Download test report
        uses: actions/download-artifact@v4

      - name: Get .xml reports from separate Artifacts into root folder
        run: rsync -av test-report-USER_*/* .

      - name: Merge Test Reports
        run: python tod_scripts/merge_terraform_results.py

      - name: Add Information to XML Report
        run: |
          filename=$(ls | grep -E '^[0-9]{12}_terraform_merged_report.xml$') 
          python tod_scripts/add_to_xml_test_report.py --branch_name "${GITHUB_REF#refs/*/}" --gha_run_id "${GITHUB_RUN_ID}" --gha_run_number "${GITHUB_RUN_NUMBER}" --xmlfile "${filename}"

      - name: Upload Test Results
        run: |
          filename=$(ls | grep -E '^[0-9]{12}_terraform_merged_report.xml$') 
          python3 tod_scripts/test_report_upload_script.py "${filename}"
        env:
          LINODE_CLI_OBJ_ACCESS_KEY: ${{ secrets.LINODE_CLI_OBJ_ACCESS_KEY }}
          LINODE_CLI_OBJ_SECRET_KEY: ${{ secrets.LINODE_CLI_OBJ_SECRET_KEY }}
