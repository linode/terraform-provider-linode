on:
  pull_request:
  repository_dispatch:
    types: [acctest-command]

name: Integration tests

jobs:
  # Maintainer has commented /acctest on a pull request
  integration-fork:
    runs-on: ubuntu-latest
    if:
      github.event_name == 'repository_dispatch' &&
      github.event.client_payload.slash_command.sha != '' &&
      github.event.client_payload.slash_command.pkg != '' &&
      contains(github.event.client_payload.pull_request.head.sha, github.event.client_payload.slash_command.sha)

    steps:
      - uses: actions-ecosystem/action-regex-match@v2
        id: validate-pkg
        with:
          text: ${{ github.event.client_payload.slash_command.pkg }}
          regex: '[^a-z0-9.\/]'
          flags: gi

      # Check out merge commit
      - name: Checkout PR
        uses: actions/checkout@v2
        with:
          ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'

      - run: make PKG_NAME="${{ github.event.client_payload.slash_command.pkg }}" testacc
        if: ${{ steps.validate-pkg.outputs.match == '' }}
        env:
          LINODE_TOKEN: ${{ secrets.DX_LINODE_TOKEN }}

      - uses: actions/github-script@v5
        id: update-check-run
        if: ${{ always() }}
        env:
          number: ${{ github.event.client_payload.pull_request.number }}
          job: ${{ github.job }}
          conclusion: ${{ job.status }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pull } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: process.env.number
            });
            const ref = pull.head.sha;
            const { data: checks } = await github.rest.checks.listForRef({
              ...context.repo,
              ref
            });
            const check = checks.check_runs.filter(c => c.name === process.env.job);
            const { data: result } = await github.rest.checks.update({
              ...context.repo,
              check_run_id: check[0].id,
              status: 'completed',
              conclusion: process.env.conclusion
            });
            return result;
