on:
  pull_request:
  workflow_dispatch:
    inputs:
      module:
        description: 'The module to be tested.'
        required: true
        default: 'linode/...'
      sha:
        description: 'The hash value of the commit.'
        required: true
      pull_request_number:
        description: 'The number of the PR.'
        required: false
      run_long_tests:
        description: 'Setting this value will skip long running tests (e.g. Database related cases): (true|false)'
        required: false


name: Integration tests on PR

jobs:
  integration-fork:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.sha != ''
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: 'stable'
      - run: go version

      - uses: actions/github-script@v7
        id: disallowed-character-check
        env:
          text: ${{ inputs.module }}
        with:
          result-encoding: string
          script: |
            let regex = /[^a-z0-9./]/;
            let result = regex.test(process.env.text);
            if (result) {
              return "not pass";
            } else {
              return "pass";
            }

      # Check out merge commit
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}

      - run: make tooldeps

      - run: make PKG_NAME="${{ inputs.module }}" testacc
        if: ${{ steps.disallowed-character-check.outputs.result == 'pass' }}
        env:
          LINODE_TOKEN: ${{ secrets.DX_LINODE_TOKEN }}
          RUN_LONG_TESTS: ${{ inputs.run_long_tests }}
      
      - name: Get the hash value of the latest commit from the PR branch
        uses: octokit/graphql-action@v2.x
        id: commit-hash
        if: ${{ inputs.pull_request_number != '' }}
        with:
          query: |
            query PRHeadCommitHash($owner: String!, $repo: String!, $pr_num: Int!) {
              repository(owner:$owner, name:$repo) {
                pullRequest(number: $pr_num) {
                  headRef {
                    target {
                      ... on Commit {
                        oid
                      }
                    }
                  }
                }
              }
            }
          owner: ${{ github.event.repository.owner.login }}
          repo: ${{ github.event.repository.name }}
          pr_num: ${{ fromJSON(inputs.pull_request_number) }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/github-script@v7
        id: update-check-run
        if: ${{ steps.disallowed-character-check.outputs.result == 'pass' && inputs.pull_request_number != '' && fromJson(steps.commit-hash.outputs.data).repository.pullRequest.headRef.target.oid == inputs.sha }}
        env:
          number: ${{ inputs.pull_request_number }}
          job: ${{ github.job }}
          conclusion: ${{ job.status }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pull } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: process.env.number
            });
            const ref = pull.head.sha;
            const { data: checks } = await github.rest.checks.listForRef({
              ...context.repo,
              ref
            });
            const check = checks.check_runs.filter(c => c.name === process.env.job);
            const { data: result } = await github.rest.checks.update({
              ...context.repo,
              check_run_id: check[0].id,
              status: 'completed',
              conclusion: process.env.conclusion
            });
            return result;
